import com.gtnewhorizons.retrofuturagradle.mcp.ReobfuscatedJar

plugins {
    id("java")
    id("java-library")
    id("maven-publish")
    id("eclipse")
    id("com.gtnewhorizons.retrofuturagradle") version "1.4.1"
}

version = project.mod_version
group = project.mod_group
archivesBaseName = project.archive_base_name

java {}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

configurations {
	embed
	implementation.extendsFrom(embed)
    create("runtimeOnlyNonPublishable") {
        description = "Runtime only dependencies that are not published alongside the jar"
        canBeConsumed = false
        canBeResolved = false
    }

    create("devOnlyNonPublishable") {
        description = "Runtime and compiletime dependencies that are not published alongside the jar (compileOnly + runtimeOnlyNonPublishable)"
        canBeConsumed = false
        canBeResolved = false
    }
    compileOnly.extendsFrom(devOnlyNonPublishable)
    runtimeOnlyNonPublishable.extendsFrom(devOnlyNonPublishable)
    runtimeClasspath.extendsFrom(runtimeOnlyNonPublishable)
    testRuntimeClasspath.extendsFrom(runtimeOnlyNonPublishable)
}

minecraft {
    mcVersion = project.minecraft_version
    def args = ["-ea:${project.group}"]
    if (project.use_coremod.toBoolean()) {
        args << '-Dfml.coreMods.load=' + coremod_plugin_class_name
    }
    if (project.use_mixins.toBoolean()) {
        args << '-Dmixin.hotSwap=true'
        args << '-Dmixin.checks.interfaces=true'
        args << '-Dmixin.debug.export=true'
    }
    extraRunJvmArguments.addAll(args)

    useDependencyAccessTransformers = true

    injectedTags.put("MOD_ID", project.mod_id)
    injectedTags.put("MOD_NAME", project.mod_name)
    injectedTags.put("MOD_VERSION", project.mod_version)
    injectedTags.put("MOD_DEPENDENCIES", '')
}

tasks.injectTags.configure {
    outputClassName.set("${project.group}.${project.mod_id}.Tags")
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                url 'https://cursemaven.com'
            }
        }
        filter {
            includeGroup 'curse.maven'
        }
    }
    maven {
		name = 'SpongePowered Maven'
		url = 'https://repo.spongepowered.org/maven'
	}
    exclusiveContent {
        forRepository {
            maven {
                url 'https://jitpack.io'
            }
        }
        filter {
            includeGroup 'com.github.LegacyModdingMC.UniMixins'
        }
    }
    maven {
        name = 'Jitpack'
        url = 'https://jitpack.io'
    }
    mavenLocal()
}

dependencies {
    if (project.use_assetmover.toBoolean()) {
        implementation 'com.cleanroommc:assetmover:2.5'
    }
    if (project.use_mixins.toBoolean()) {
        def unimixinsVersion = '0.1.19'
    	def refMapName = 'mixins.' + project.archive_base_name + '.refmap.json'
    	def mixinProviderSpec = "com.github.LegacyModdingMC.UniMixins:unimixins-all-1.7.10:${unimixinsVersion}:dev"

    	// Common
    	annotationProcessor('org.ow2.asm:asm-debug-all:5.2')
        annotationProcessor('com.google.guava:guava:33.4.0-jre')
        annotationProcessor('com.google.code.gson:gson:2.12.1')

        // Mixins
    	implementation(modUtils.enableMixins(mixinProviderSpec, refMapName))
        api(mixinProviderSpec) { transitive = false }
        annotationProcessor(mixinProviderSpec) { transitive = false }

        // Specific mixin modules from UniMixins
        implementation("com.github.LegacyModdingMC.UniMixins:unimixins-compat-1.7.10:$unimixinsVersion:dev")
        implementation("com.github.LegacyModdingMC.UniMixins:unimixins-spongemixins-1.7.10:$unimixinsVersion:dev")
        implementation("com.github.LegacyModdingMC.UniMixins:unimixins-mixinbooterlegacy-1.7.10:$unimixinsVersion:dev")
        implementation("com.github.LegacyModdingMC.UniMixins:unimixins-mixinextras-1.7.10:$unimixinsVersion:dev")
        implementation("com.github.LegacyModdingMC.UniMixins:unimixins-gtnhmixins-1.7.10:$unimixinsVersion:dev")
    }

    // Runtime-only mods (things we like for easier testing!)
    if (project.hasProperty('use_convenience_mods') && project.use_convenience_mods.toBoolean()) {
        runtimeOnlyNonPublishable rfg.deobf('com.github.GTNewHorizons:NotEnoughItems:2.7.40-GTNH:dev')
        runtimeOnlyNonPublishable rfg.deobf('com.github.GTNewHorizons:waila:1.8.2:dev')
        runtimeOnlyNonPublishable rfg.deobf('curse.maven:in-game-account-switcher-232676:3993185')
    }

    // Runtime-only mods (for testing various mod compatibility)
    if (project.hasProperty('use_advent_of_ascension') && project.use_advent_of_ascension.toBoolean()) {
		devOnlyNonPublishable rfg.deobf('curse.maven:advent-of-ascension-nevermine-311054:2973564')
    }
    if (project.hasProperty('use_divine_rpg') && project.use_divine_rpg.toBoolean()) {
		devOnlyNonPublishable rfg.deobf('curse.maven:official-divinerpg-363543:6330550')
    }
    if (project.hasProperty('use_aether') && project.use_aether.toBoolean()) {
	    devOnlyNonPublishable rfg.deobf('curse.maven:aether-255308:5875775')
    }
    if (project.hasProperty('use_thaumcraft') && project.use_thaumcraft.toBoolean()) {
	    devOnlyNonPublishable rfg.deobf('thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev')
    }

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.11.4'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.4'
}

// Exclude conflicting transitive dependencies if using mixins
configurations.compileOnly.dependencies.each {
    if (it instanceof ExternalModuleDependency && project.use_mixins.toBoolean()) {
        it.exclude module: 'SpongeMixins'
        it.exclude module: 'SpongePoweredMixin'
        it.exclude module: '00gasstation-mc1.7.10'
        it.exclude module: 'gtnhmixins'
    }
}

// Tweak client run settings if using mixins
runClient {
    if (project.use_mixins.toBoolean()) {
        args('--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker')
    }
}

// Tweak server run settings if using mixins
runServer {
    if (project.use_mixins.toBoolean()) {
        args('--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker')
    }
}

test {
    useJUnitPlatform()
}

def mixinConfigRefMap = 'mixins.' + project.archive_base_name + '.refmap.json'
def mixinTmpDir = buildDir.path + File.separator + 'tmp' + File.separator + 'mixins'
def refMap = "${mixinTmpDir}" + File.separator + mixinConfigRefMap
def mixinSrg = "${mixinTmpDir}" + File.separator + "mixins.srg"

if (project.use_mixins.toBoolean()) {
    tasks.named("reobfJar", ReobfuscatedJar).configure {
        extraSrgFiles.from(mixinSrg)
    }

    tasks.named("compileJava", JavaCompile).configure {
        doFirst {
            new File(mixinTmpDir).mkdirs()
        }
        options.compilerArgs += [
                "-AreobfSrgFile=${tasks.reobfJar.srg.get().asFile}",
                "-AoutSrgFile=${mixinSrg}",
                "-AoutRefMapFile=${refMap}",
        ]
    }
}

if (project.use_access_transformer.toBoolean()) {
    for (File at : sourceSets.getByName("main").resources.files) {
        if (at.name.toLowerCase().endsWith("_at.cfg")) {
            tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
            tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
        }
    }
}

processResources {
    inputs.property 'mod_version', project.version
    inputs.property 'minecraft_version', project.minecraft.version

    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        fcd.expand(
                'mod_id': project.mod_id,
                'mod_name': project.mod_name,
                'mod_version': project.version,
                'mod_author': project.mod_author,
                'mod_description': project.mod_description,
                'minecraft_version': project.minecraft.version
        )
    }

    if (project.use_access_transformer.toBoolean()) {
        rename '(.+_at.cfg)', 'META-INF/$1'
    }

    if (project.use_mixins.toBoolean()) {
        from refMap
        dependsOn("compileJava")
    }
}
jar {
    manifest {
        def attribute_map = [:]
        if (project.use_mixins.toBoolean()) {
            attribute_map['TweakClass'] = 'org.spongepowered.asm.launch.MixinTweaker'
        }
        if (project.use_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
            }
        }
        if (project.use_access_transformer.toBoolean()) {
            attribute_map['FMLAT'] = project.archive_base_name + '_at.cfg'
        }
        attributes(attribute_map)
    }
    setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from(provider {
        configurations.embed.collect {
            if (it.isDirectory()) {
                return it
            } else {
                zipTree(it).matching {
                    exclude '**/LICENSE*', 'META-INF/**'
                }
            }
        }
    })
}

sourceSets {
    generator {
        java {
            srcDir 'src/generator/java'
        }
    }
    if (project.hasProperty('use_advent_of_ascension') && !project.use_advent_of_ascension.toBoolean()) {
        main {
            java {
                exclude('**/player_handling_customizer/mixins/**/advent_of_ascension/**')
            }
        }
    }
    if (project.hasProperty('use_divine_rpg') && !project.use_divine_rpg.toBoolean()) {
        main {
            java {
                exclude('**/player_handling_customizer/mixins/**/divinerpg/**')
            }
        }
    }
    if (project.hasProperty('use_aether') && !project.use_aether.toBoolean()) {
        main {
            java {
                exclude('**/player_handling_customizer/mixins/**/aether/**')
            }
        }
    }
    if (project.hasProperty('use_thaumcraft') && !project.use_thaumcraft.toBoolean()) {
        main {
            java {
                exclude('**/player_handling_customizer/mixins/**/thaumcraft/**')
            }
        }
    }
    api {
        java {
            srcDir 'src/api/java'
        }
    }
}
